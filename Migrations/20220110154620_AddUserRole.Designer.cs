// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingScheduler.Models;

namespace TrainingScheduler.Migrations
{
    [DbContext(typeof(TrainingSchedulerContext))]
    [Migration("20220110154620_AddUserRole")]
    partial class AddUserRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("TrainingScheduler.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("FileData")
                        .HasColumnType("text");

                    b.HasKey("EventID");

                    b.ToTable("event");
                });

            modelBuilder.Entity("TrainingScheduler.Models.EventType", b =>
                {
                    b.Property<int>("EventTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("EventTypeID");

                    b.ToTable("event_type");
                });

            modelBuilder.Entity("TrainingScheduler.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("From")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("MessageTime")
                        .HasColumnType("time");

                    b.Property<int>("MessageTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.HasKey("MessageID");

                    b.ToTable("message");
                });

            modelBuilder.Entity("TrainingScheduler.Models.MessageType", b =>
                {
                    b.Property<int>("MessageTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("MessageTypeID");

                    b.ToTable("message_type");
                });

            modelBuilder.Entity("TrainingScheduler.Models.Response", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("AnswerID");

                    b.ToTable("response");
                });

            modelBuilder.Entity("TrainingScheduler.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("RoleID");

                    b.ToTable("role");
                });

            modelBuilder.Entity("TrainingScheduler.Models.SailPlan", b =>
                {
                    b.Property<int>("SailPlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Arrived")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CBRadioMonitorsCH")
                        .HasColumnType("text");

                    b.Property<string>("ColorOfCabin")
                        .HasColumnType("text");

                    b.Property<string>("ColorOfDeck")
                        .HasColumnType("text");

                    b.Property<string>("ColorOfHulk")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionAndColor")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpectedArrivalTime")
                        .HasColumnType("datetime");

                    b.Property<string>("HorsePower")
                        .HasColumnType("text");

                    b.Property<bool>("InboardOrOutboard")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMotor")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MFRadioMonitorsFrequency")
                        .HasColumnType("text");

                    b.Property<string>("MMSINumber")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfLifeRafts")
                        .HasColumnType("int");

                    b.Property<string>("OtherCharactistics")
                        .HasColumnType("text");

                    b.Property<string>("OwnerName")
                        .HasColumnType("text");

                    b.Property<string>("SizeAndType")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TelephoneAddress")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("VHFRadioMonitorsCH")
                        .HasColumnType("text");

                    b.Property<string>("VesselName")
                        .HasColumnType("text");

                    b.HasKey("SailPlanID");

                    b.ToTable("sail_plan");
                });

            modelBuilder.Entity("TrainingScheduler.Models.SailPlanLocation", b =>
                {
                    b.Property<int>("SailPlanLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Arrived")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ExpectedArrival")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpectedDeparture")
                        .HasColumnType("datetime");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<int>("SailPlanID")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("SailPlanLocationID");

                    b.ToTable("sail_plan_location");
                });

            modelBuilder.Entity("TrainingScheduler.Models.Script", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("script");
                });

            modelBuilder.Entity("TrainingScheduler.Models.ScriptEvent", b =>
                {
                    b.Property<int>("ScriptEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("ScriptID")
                        .HasColumnType("int");

                    b.HasKey("ScriptEventID");

                    b.ToTable("script_event");
                });

            modelBuilder.Entity("TrainingScheduler.Models.Station", b =>
                {
                    b.Property<int>("StationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("StationID");

                    b.ToTable("station");
                });

            modelBuilder.Entity("TrainingScheduler.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("user");
                });

            modelBuilder.Entity("TrainingScheduler.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserRoleID");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("TrainingScheduler.Models.UserStation", b =>
                {
                    b.Property<int>("UserStationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<int>("StationID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserStationID");

                    b.ToTable("user_station");
                });

            modelBuilder.Entity("TrainingScheduler.Models.WeatherAmountType", b =>
                {
                    b.Property<int>("WeatherAmountTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("WeatherAmountTypeID");

                    b.ToTable("weather_amount_type");
                });

            modelBuilder.Entity("TrainingScheduler.Models.WeatherInfo", b =>
                {
                    b.Property<int>("WeatherInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<string>("CloudCover")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Desctiption")
                        .HasColumnType("text");

                    b.Property<string>("FeelsLike")
                        .HasColumnType("text");

                    b.Property<string>("HighTemprature")
                        .HasColumnType("text");

                    b.Property<string>("Humidity")
                        .HasColumnType("text");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("LowTemprature")
                        .HasColumnType("text");

                    b.Property<string>("Pressure")
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Temprature")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("UVIndex")
                        .HasColumnType("text");

                    b.Property<string>("Visibility")
                        .HasColumnType("text");

                    b.Property<string>("WindDirection")
                        .HasColumnType("text");

                    b.Property<string>("WindGusts")
                        .HasColumnType("text");

                    b.Property<string>("WindSpeed")
                        .HasColumnType("text");

                    b.HasKey("WeatherInfoID");

                    b.ToTable("weather_info");
                });
#pragma warning restore 612, 618
        }
    }
}
